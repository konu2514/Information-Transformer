Perfect ‚úÖ thanks for confirming.
Here‚Äôs the plan for your project exception handling:

---

## üîπ Step 1: Create Custom Exceptions

We‚Äôll define exceptions specific to your domain (Policy Vault).

```java
// src/main/java/org/godigit/policyvault/exception/PolicyNotFoundException.java
package org.godigit.policyvault.exception;

public class PolicyNotFoundException extends RuntimeException {
    public PolicyNotFoundException(String message) {
        super(message);
    }
}

// src/main/java/org/godigit/policyvault/exception/UserNotFoundException.java
package org.godigit.policyvault.exception;

public class UserNotFoundException extends RuntimeException {
    public UserNotFoundException(String message) {
        super(message);
    }
}

// src/main/java/org/godigit/policyvault/exception/UnauthorizedActionException.java
package org.godigit.policyvault.exception;

public class UnauthorizedActionException extends RuntimeException {
    public UnauthorizedActionException(String message) {
        super(message);
    }
}
```

---

## üîπ Step 2: Global Exception Handler

This will **catch all exceptions** and return **user-friendly API responses**.

```java
// src/main/java/org/godigit/policyvault/exception/GlobalExceptionHandler.java
package org.godigit.policyvault.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    private ResponseEntity<Object> buildResponse(HttpStatus status, String message) {
        Map<String, Object> body = new HashMap<>();
        body.put("timestamp", Instant.now());
        body.put("status", status.value());
        body.put("error", status.getReasonPhrase());
        body.put("message", message);
        return new ResponseEntity<>(body, status);
    }

    @ExceptionHandler(PolicyNotFoundException.class)
    public ResponseEntity<Object> handlePolicyNotFound(PolicyNotFoundException ex) {
        return buildResponse(HttpStatus.NOT_FOUND, ex.getMessage());
    }

    @ExceptionHandler(UserNotFoundException.class)
    public ResponseEntity<Object> handleUserNotFound(UserNotFoundException ex) {
        return buildResponse(HttpStatus.NOT_FOUND, ex.getMessage());
    }

    @ExceptionHandler(UnauthorizedActionException.class)
    public ResponseEntity<Object> handleUnauthorized(UnauthorizedActionException ex) {
        return buildResponse(HttpStatus.FORBIDDEN, ex.getMessage());
    }

    @ExceptionHandler(Exception.class) // fallback for unexpected errors
    public ResponseEntity<Object> handleGeneral(Exception ex) {
        return buildResponse(HttpStatus.INTERNAL_SERVER_ERROR, "An unexpected error occurred: " + ex.getMessage());
    }
}
```

---

## üîπ Step 3: Update Service Implementations

Now let‚Äôs update your **service classes** to throw exceptions instead of crashing.

---

### 1Ô∏è‚É£ `ChangeLogServiceImpl`

```java
package org.godigit.policyvault.service.impl;

import org.godigit.policyvault.dto.ChangeLogResponse;
import org.godigit.policyvault.entities.ChangeLog;
import org.godigit.policyvault.exception.PolicyNotFoundException;
import org.godigit.policyvault.repository.ChangeLogRepository;
import org.godigit.policyvault.service.ChangeLogService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
public class ChangeLogServiceImpl implements ChangeLogService {

    private final ChangeLogRepository changeLogRepo;

    public ChangeLogServiceImpl(ChangeLogRepository changeLogRepo) {
        this.changeLogRepo = changeLogRepo;
    }

    @Override
    public List<ChangeLogResponse> getChangeLogs(UUID policyId) {
        List<ChangeLog> logs = changeLogRepo.findByPolicyId(policyId);

        if (logs.isEmpty()) {
            throw new PolicyNotFoundException("No change logs found for policy ID: " + policyId);
        }

        return logs.stream()
                .map(cl -> new ChangeLogResponse(
                        cl.getId(),
                        cl.getPolicy().getId(),
                        cl.getOldVersion(),
                        cl.getNewVersion(),
                        cl.getChangedBy(),
                        cl.getDescription(),
                        cl.getChangeDate()))
                .toList();
    }
}
```

---

### 2Ô∏è‚É£ `AuditLogServiceImpl`

```java
package org.godigit.policyvault.service.impl;

import org.godigit.policyvault.entities.AuditLog;
import org.godigit.policyvault.entities.Policy;
import org.godigit.policyvault.exception.PolicyNotFoundException;
import org.godigit.policyvault.repository.AuditLogRepository;
import org.godigit.policyvault.repository.PolicyRepository;
import org.godigit.policyvault.service.AuditLogService;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

@Service
public class AuditLogServiceImpl implements AuditLogService {

    private final AuditLogRepository auditLogRepo;
    private final PolicyRepository policyRepository;

    public AuditLogServiceImpl(AuditLogRepository auditLogRepo, PolicyRepository policyRepository) {
        this.auditLogRepo = auditLogRepo;
        this.policyRepository = policyRepository;
    }

    @Override
    public void log(String userId, UUID policyId, String action) {
        Policy policy = policyRepository.findById(policyId)
                .orElseThrow(() -> new PolicyNotFoundException("Policy not found with ID: " + policyId));

        AuditLog log = new AuditLog();
        log.setUserId(userId);
        log.setPolicy(policy);
        log.setAction(action);
        auditLogRepo.save(log);
    }

    @Override
    public List<AuditLog> getLogsByPolicy(UUID policyId) {
        List<AuditLog> logs = auditLogRepo.findByPolicyId(policyId);
        if (logs.isEmpty()) {
            throw new PolicyNotFoundException("No logs found for policy ID: " + policyId);
        }
        return logs;
    }

    @Override
    public List<AuditLog> getLogsByUser(String userId) {
        List<AuditLog> logs = auditLogRepo.findByUserId(userId);
        if (logs.isEmpty()) {
            throw new PolicyNotFoundException("No logs found for user ID: " + userId);
        }
        return logs;
    }

    @Override
    public void record(String userId, UUID policyId, String action, String description, Instant ts) {
        Policy policy = policyRepository.findById(policyId)
                .orElseThrow(() -> new PolicyNotFoundException("Policy not found with ID: " + policyId));

        AuditLog log = new AuditLog();
        log.setUserId(userId);
        log.setPolicy(policy);
        log.setAction(action + " - " + description);
        log.setTimestamp(ts != null ? ts : Instant.now());
        auditLogRepo.save(log);
    }
}
```

---

### 3Ô∏è‚É£ `PolicyVersionServiceImpl`

```java
package org.godigit.policyvault.service.impl;

import org.godigit.policyvault.dto.PolicyVersionResponse;
import org.godigit.policyvault.entities.PolicyVersion;
import org.godigit.policyvault.exception.PolicyNotFoundException;
import org.godigit.policyvault.repository.PolicyVersionRepository;
import org.godigit.policyvault.service.PolicyVersionService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
public class PolicyVersionServiceImpl implements PolicyVersionService {

    private final PolicyVersionRepository versionRepo;

    public PolicyVersionServiceImpl(PolicyVersionRepository versionRepo) {
        this.versionRepo = versionRepo;
    }

    @Override
    public List<PolicyVersionResponse> getAllVersions(UUID policyId) {
        List<PolicyVersion> versions = versionRepo.findByPolicyIdOrderByVersionDesc(policyId);

        if (versions.isEmpty()) {
            throw new PolicyNotFoundException("No versions found for policy ID: " + policyId);
        }

        return versions.stream().map(this::toDto).toList();
    }

    @Override
    public PolicyVersionResponse getVersion(UUID policyId, int version) {
        PolicyVersion pv = versionRepo.findByPolicyIdAndVersion(policyId, version);

        if (pv == null) {
            throw new PolicyNotFoundException("Version " + version + " not found for policy ID: " + policyId);
        }

        return toDto(pv);
    }

    private PolicyVersionResponse toDto(PolicyVersion pv) {
        return new PolicyVersionResponse(
                pv.getId(),
                pv.getPolicy().getId(),
                pv.getVersion(),
                pv.getContent(),
                pv.getCreatedAt());
    }
}
```

---

‚úÖ Now your project has:

* **Custom exceptions** (`PolicyNotFoundException`, `UserNotFoundException`, `UnauthorizedActionException`).
* **Global exception handler** returning JSON API responses.
* **All service implementations updated** to throw exceptions instead of returning empty/null.

---

üëâ Do you also want me to **update controllers** to show how exceptions will automatically return clean API responses, or is updating the services enough for now?
