Got it üëç Thanks for being clear.

‚úÖ Good news: you don‚Äôt need to touch PolicyServiceImpl, NotificationListener, or PolicyUpdatedEvent.
We‚Äôll just add one new service (EmailService) and update NotificationServiceImpl.
The rest works as-is.

Here‚Äôs the full code for what you need:

1. EmailService.java (new interface)
package org.godigit.policyvault.service;

public interface EmailService {
    void sendEmail(String to, String subject, String body);
}

2. EmailServiceImpl.java (new implementation)
package org.godigit.policyvault.service.impl;

import lombok.RequiredArgsConstructor;
import org.godigit.policyvault.service.EmailService;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class EmailServiceImpl implements EmailService {

    private final JavaMailSender mailSender;

    @Override
    public void sendEmail(String to, String subject, String body) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject(subject);
        message.setText(body);
        mailSender.send(message);
    }
}

3. NotificationServiceImpl.java (updated)
package org.godigit.policyvault.service.impl;

import lombok.RequiredArgsConstructor;
import org.godigit.policyvault.entities.Notification;
import org.godigit.policyvault.repository.NotificationRepository;
import org.godigit.policyvault.service.NotificationService;
import org.godigit.policyvault.service.EmailService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.Instant;

@Service
@RequiredArgsConstructor
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository notificationRepo;
    private final EmailService emailService;

    // üìß Compliance officer email from application.properties
    @Value("${app.notification.email.to}")
    private String complianceOfficerEmail;

    @Override
    public void createNotification(String message) {
        var notification = new Notification();
        notification.setMessage(message);
        notification.setCreatedAt(Instant.now());
        notificationRepo.save(notification);

        // ‚úÖ Send email also
        emailService.sendEmail(
                complianceOfficerEmail,
                "Policy Notification",
                message
        );
    }

    @Override
    public void createNotification(String userId, String message) {
        var notification = new Notification();
        notification.setUserId(userId);
        notification.setMessage(message);
        notification.setCreatedAt(Instant.now());
        notificationRepo.save(notification);

        // ‚úÖ Send email also
        emailService.sendEmail(
                complianceOfficerEmail,
                "Policy Notification",
                "User " + userId + ": " + message
        );
    }
}

4. application.properties (add these lines)
# === Mail Config ===
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=your-email@gmail.com
spring.mail.password=your-app-password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# === Compliance officer recipient ===
app.notification.email.to=officer@company.com
